{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["##Use of Semicolon\n","It is not compulsory but doesn't throw an error if we use it.\n","\n","A semicolon in Python denotes separation, rather than termination."],"metadata":{"id":"QWOFbmKHNFAg"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"cz2-F3zlLKJr"},"outputs":[],"source":["print('Hello World'); print(\"IEEE\")"]},{"cell_type":"markdown","source":["##Indentation\n","Python uses spaces before code of line and does not use curly braces {} to seperate a code of block.\n","\n","Where in other programming languages the indentation in code is for readability only, the indentation in Python is very important. Python uses indentation to indicate a block of code."],"metadata":{"id":"PdhXU68wV9GI"}},{"cell_type":"code","source":["a = 'Hello World'\n","print(a)"],"metadata":{"id":"GLJmLSIYWZ_x"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if 5>3:\n","  print('Yes')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w1C4bQmoWj_L","outputId":"4a2a9307-d5a5-4432-d3b2-b6de511d5af1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Yes\n"]}]},{"cell_type":"markdown","source":["##Keywords in Python\n","Keywords are reserved words and cannot be used as an identifier."],"metadata":{"id":"fP6-JvExqTlL"}},{"cell_type":"code","source":["true = 14000\n","print(true)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uJDJw21MtOm9","outputId":"211e69e4-7d58-4b5c-8223-bb2c3cfb9ed5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["14000\n"]}]},{"cell_type":"markdown","source":["##Variables\n","Value is given a memory address not the variable.\n","\n","A variable is a tag or name for this very memory address."],"metadata":{"id":"gT-AxD0c4sVr"}},{"cell_type":"markdown","source":["###Declare a Variable"],"metadata":{"id":"uKglINSoVSRV"}},{"cell_type":"code","source":["a = 10\n","b = 10\n","print('a = ' , id(a)) #id is used to get the memory address\n","print('b = ' , id(b))"],"metadata":{"id":"-42HNJ5g5k_M","colab":{"base_uri":"https://localhost:8080/"},"outputId":"037ed656-ebb0-438d-f67d-870504c309c6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["a =  9793376\n","b =  9793376\n"]}]},{"cell_type":"markdown","source":["###Re-declare a Variable"],"metadata":{"id":"yQo8RK5GVE_f"}},{"cell_type":"code","source":["b = 251\n","print('a = ' , id(a))\n","print('b = ' , id(b))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kgoDnBx5SeIw","outputId":"902e17b7-9aa2-4fb1-a854-7b797e5b49af"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["a =  9793376\n","b =  9801088\n"]}]},{"cell_type":"code","source":["a = 53\n","print('a = ' , id(a))\n","print('b = ' , id(b))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pE0YHRWpSxKP","outputId":"3c5c4203-2e3a-4756-c5d2-5c5870052dd0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["a =  9794752\n","b =  9801088\n"]}]},{"cell_type":"markdown","source":["###Assigning a single value to multiple variables"],"metadata":{"id":"1MrVJW_VVptk"}},{"cell_type":"code","source":["a = b = c = 10\n","print(a)\n","print(b)\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mBGYNng8VsCv","outputId":"f671016f-4f3a-4482-9046-1680df579c7a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["10\n","10\n","10\n"]}]},{"cell_type":"markdown","source":["###Assigning different values to multiple variables"],"metadata":{"id":"pw_3COaKVznt"}},{"cell_type":"code","source":["a, b, c = 1, 20.5, \"IEEE Workshop\" \n","print(a)\n","print(b)\n","print(c)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LDVeGCTZV47a","outputId":"ee0612a5-b1cf-4778-bd94-ffb1115cdcd5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","20.5\n","IEEE Workshop\n"]}]},{"cell_type":"markdown","source":["###Guess the output..."],"metadata":{"id":"QcaDFhmpWN4K"}},{"cell_type":"code","source":["a = 10\n","a = \"IEEE Workshop\" \n","print(a)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"v_DvY1TdWR0R","outputId":"9b81093d-734c-41e3-9464-49f9811aae90"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["IEEE Workshop\n"]}]},{"cell_type":"markdown","source":["###Can we use the same name for different types? \n","If we use the same name, the variable starts referring to a new value and type. "],"metadata":{"id":"K4O5TVNJWcJQ"}},{"cell_type":"markdown","source":["##Constants\n","Variables in capital letters.\n","\n","Its a convention and does not really prevent reassigning of values.\n","\n","Usually constants are declared in a module which is then imported to the main file."],"metadata":{"id":"GVLFkHUMZwc3"}},{"cell_type":"code","source":["PI = 3.14\n","GRAVITY = 9.8\n","print(PI)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TYlaxWs5aHh0","outputId":"f3cfdf80-8098-4852-b4a0-b1a9bd704650"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3.14\n"]}]},{"cell_type":"code","source":["a = '1'\n","b = '2'\n","print(a+b)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9-FvggAVdrA3","outputId":"5c83b58d-b8d4-45d5-9f67-b52d0408aa0b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["12\n"]}]},{"cell_type":"markdown","source":["##Data Types"],"metadata":{"id":"6g5fCFfa-Ecq"}},{"cell_type":"markdown","source":["###Complex Number"],"metadata":{"id":"mr5rVxfO-LO1"}},{"cell_type":"code","source":["num = 6 + 9j\n","print(num)\n","print(type(num))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I6RbBVud-neA","outputId":"8b7f1091-3ff6-4129-e43d-d5a4468814c3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(6+9j)\n","<class 'complex'>\n"]}]},{"cell_type":"markdown","source":["##Typecasting or Type Conversion\n","Conversion of one data type into another."],"metadata":{"id":"VAM0mpX9d1nB"}},{"cell_type":"markdown","source":["###Explicit Typecasting\n","Done via programmer's intervention or manually as pe requirement.\n","\n","Example: int(), float(), str(), dict(), set(), list(), etc."],"metadata":{"id":"hXZ0U26TePCL"}},{"cell_type":"code","source":["a = '1'\n","b = '2'\n","print(int(a) + int(b))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bAIAUCayeipm","outputId":"4d206290-930f-44ea-9c99-6b7f6f0e27cf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}]},{"cell_type":"markdown","source":["###Implicit Typecasting\n","Python converts a smaller datatype to a higher datatype to prevent data loss."],"metadata":{"id":"fjnXprcse9YX"}},{"cell_type":"code","source":["a = 10\n","b = 6.9\n","c = a+b\n","print(c)\n","print(type(c))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"llibMshVfPt1","outputId":"c60ff288-4ec3-4e6c-add2-4b429813548f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["16.9\n","<class 'float'>\n"]}]},{"cell_type":"markdown","source":["##Scope of Variable"],"metadata":{"id":"UKaeydL2x9ah"}},{"cell_type":"code","source":["x = 10 #Global\n","\n","def india():\n","  x = 50 #Enclosing\n","\n","  def dholakpur():\n","    x = 100 #Local\n","    print('Dholakpur = ' , x)\n","\n","  dholakpur()\n","  print('India = ' , x)\n","\n","india()\n","print('Global = ' , x)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jC-FogHBEJty","outputId":"c8e2d76a-14b7-4115-a08e-4624d1279747"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Dholakpur =  100\n","India =  50\n","Global =  10\n"]}]},{"cell_type":"markdown","source":["##Comments\n","Code Readability\n","\n","Explanation of the code or Metadata of the project\n","\n","Prevent execution of code\n","\n","To include resources"],"metadata":{"id":"2W5L1y4H2ZIi"}},{"cell_type":"markdown","source":["###Single Line"],"metadata":{"id":"xIDQWBZg260D"}},{"cell_type":"code","source":["#This is a single line comment\n","print('IEEE Python Workshop')"],"metadata":{"id":"PHZAizQ72-6E","colab":{"base_uri":"https://localhost:8080/"},"outputId":"a4570ab8-da6d-4709-ea9a-9006d058d026"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["IEEE Python Workshop\n"]}]},{"cell_type":"markdown","source":["###Multiline"],"metadata":{"id":"8OpviIbg4F5d"}},{"cell_type":"code","source":["#Welcome to\n","#python"],"metadata":{"id":"NDsOMjLN4Krg"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###Docstring"],"metadata":{"id":"qmwBINHH4Sm-"}},{"cell_type":"code","source":["'''Hello everyone\n","Welcome to\n","fbeywui\n","ComputationalThinking.py'''\n","print('Hello')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YgYjBb-v4Z8h","outputId":"6e565a52-f643-4382-b529-7279402e82b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello\n"]}]}]}